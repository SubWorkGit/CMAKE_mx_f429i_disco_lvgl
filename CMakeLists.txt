cmake_minimum_required(VERSION 3.22)

# Specifies the minimum required CMake version for this project.
# Ensures compatibility and prevents using features from newer versions that may not be supported.

#
# This file is generated only once,
# and is not re-generated if the converter is called multiple times.
#
# The user is free to modify this file as needed.
#

# -----------------------------------------------------------------------------
# Compiler settings
# -----------------------------------------------------------------------------

# Set the C language standard to C11
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)  # Enforce using the specified C standard
set(CMAKE_C_EXTENSIONS ON)         # Allow compiler-specific extensions to the standard

# -----------------------------------------------------------------------------
# Build type configuration
# -----------------------------------------------------------------------------

# If no build type is specified, default to "Debug"
# This ensures that debugging symbols are available during development.
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Debug")
endif()

# -----------------------------------------------------------------------------
# Project configuration
# -----------------------------------------------------------------------------

# Set the project name (used throughout the build system)
set(CMAKE_PROJECT_NAME mx_f429i_disco)

# Include a custom toolchain file (for cross-compilation)
# The file contains specific compiler and linker settings for the ARM platform.
include("cmake/gcc-arm-none-eabi.cmake")

# Enable compile commands output
# This is useful for tools like clangd for code indexing and navigation.
set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)

# Enable support for the C and Assembly languages
enable_language(C ASM)

# Declare the project with the specified name and languages
project(${CMAKE_PROJECT_NAME})
message("Build type: ${CMAKE_BUILD_TYPE}")

# -----------------------------------------------------------------------------
# Executable target creation
# -----------------------------------------------------------------------------

# Create an executable target with the project name
add_executable(${CMAKE_PROJECT_NAME})

# Add STM32CubeMX generated files
# These are files automatically generated by STM32CubeMX, which sets up the basic hardware configuration.
add_subdirectory(cmake/stm32cubemx)

# -----------------------------------------------------------------------------
# Source files
# -----------------------------------------------------------------------------

# Add source files to the executable
# These files contain the implementation of various hardware features such as the display and touchpad.
target_sources(${CMAKE_PROJECT_NAME} PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/hal_stm_lvgl/stm32f429i_discovery.c  # Main board-level configuration
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/hal_stm_lvgl/tft/tft.c              # TFT display control
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/hal_stm_lvgl/tft/ili9341.c          # ILI9341 display driver
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/hal_stm_lvgl/touchpad/touchpad.c    # Touchpad handling
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/hal_stm_lvgl/touchpad/stmpe811.c    # STMPE811 touch controller driver
)

# -----------------------------------------------------------------------------
# Include paths
# -----------------------------------------------------------------------------

# Add include directories for header files
# These directories allow the compiler to locate necessary header files during compilation.
target_include_directories(${CMAKE_PROJECT_NAME} PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers                        # General drivers
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/hal_stm_lvgl           # Board-specific HAL drivers
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/hal_stm_lvgl/tft       # TFT display-specific files
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/hal_stm_lvgl/touchpad  # Touchpad-specific files
    ${CMAKE_CURRENT_SOURCE_DIR}/ext/lvgl/examples              # LVGL example applications
    ${CMAKE_CURRENT_SOURCE_DIR}/ext                           # External libraries directory
)

# -----------------------------------------------------------------------------
# Project symbols and macros
# -----------------------------------------------------------------------------

# Add custom preprocessor definitions (symbols/macros)
# These are useful for conditional compilation and platform-specific features.
target_compile_definitions(${CMAKE_PROJECT_NAME} PRIVATE
    # Add user-defined symbols here if needed
)

# -----------------------------------------------------------------------------
# Library linking
# -----------------------------------------------------------------------------

# Add custom library search paths (optional, empty by default)
target_link_directories(${CMAKE_PROJECT_NAME} PRIVATE
    # Add custom library paths here if needed
)

# -----------------------------------------------------------------------------
# FetchContent: Download and integrate external libraries
# -----------------------------------------------------------------------------

# Include FetchContent module for external library management
include(FetchContent)

# Declare LVGL (Light and Versatile Graphics Library) as a dependency
FetchContent_Declare(
    lvgl
    GIT_REPOSITORY https://github.com/lvgl/lvgl.git  # LVGL repository URL
    GIT_TAG        v8.3.0                           # Specify the desired LVGL version
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/ext/lvgl # Directory where LVGL will be downloaded
)

# Download and make LVGL available
FetchContent_MakeAvailable(lvgl)

# Check if LVGL was successfully fetched and populated
if(NOT lvgl_POPULATED)
    message(FATAL_ERROR "Failed to download LVGL. Check your network connection.")
endif()

# -----------------------------------------------------------------------------
# Integrate LVGL
# -----------------------------------------------------------------------------

# Add LVGL include directories to the project
# This allows the project to use LVGL's APIs and features.
target_include_directories(${CMAKE_PROJECT_NAME} PRIVATE
    ${lvgl_SOURCE_DIR}       # LVGL base directory
    ${lvgl_SOURCE_DIR}/src   # LVGL core source files
    ${lvgl_SOURCE_DIR}/example # LVGL example directory
)

# Add LVGL example source file
target_sources(${CMAKE_PROJECT_NAME} PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/ext/lvgl/examples/widgets/chart/lv_example_chart_7.c  # Example: Chart widget
)

# Link the LVGL library to the executable
# Also link STM32CubeMX-generated libraries if needed.
target_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE
    lvgl          # Link the LVGL library
    stm32cubemx   # Link STM32CubeMX-generated libraries
)
